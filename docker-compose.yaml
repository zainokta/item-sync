services:
  app:
    build: .
    ports:
      - "${SERVER_PORT:-8080}:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Core Configuration
      - ENV=${ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_GRACEFUL_TIMEOUT=${SERVER_GRACEFUL_TIMEOUT:-10s}
      - SERVER_READ_TIMEOUT=${SERVER_READ_TIMEOUT:-30s}
      - SERVER_WRITE_TIMEOUT=${SERVER_WRITE_TIMEOUT:-30s}
      - SERVER_IDLE_TIMEOUT=${SERVER_IDLE_TIMEOUT:-120s}
      
      # CORS Configuration
      - CORS_ALLOW_ORIGINS=${CORS_ALLOW_ORIGINS:-*}
      - CORS_ALLOW_HEADERS=${CORS_ALLOW_HEADERS:-Origin,Content-Type,Accept,Authorization,X-Requested-With}
      - CORS_ALLOW_METHODS=${CORS_ALLOW_METHODS:-GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH}
      - CORS_ALLOW_CREDENTIALS=${CORS_ALLOW_CREDENTIALS:-true}
      - CORS_MAX_AGE=${CORS_MAX_AGE:-86400}
      
      # Database Configuration
      - DATABASE_HOST=mysql
      - DATABASE_PORT=3306
      - DATABASE_USER=${DATABASE_USER:-appuser}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-rootpassword}
      - DATABASE_DATABASE=${DATABASE_DATABASE:-item_sync}
      - DATABASE_MAX_OPEN_CONNS=${DATABASE_MAX_OPEN_CONNS:-25}
      - DATABASE_MAX_IDLE_CONNS=${DATABASE_MAX_IDLE_CONNS:-25}
      - DATABASE_CONN_MAX_LIFETIME=${DATABASE_CONN_MAX_LIFETIME:-5m}
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # API Configuration (Pokemon as default)
      - API_API_TYPE=${API_API_TYPE:-pokemon}
      - API_TIMEOUT=${API_TIMEOUT:-30s}
      - API_MAX_RETRIES=${API_MAX_RETRIES:-3}
      - API_RETRY_DELAY=${API_RETRY_DELAY:-1s}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-100}
      - API_MAX_IDLE_CONNS=${API_MAX_IDLE_CONNS:-10}
      - API_IDLE_CONN_TIMEOUT=${API_IDLE_CONN_TIMEOUT:-30s}
      - API_DISABLE_COMPRESSION=${API_DISABLE_COMPRESSION:-false}
      - API_MAX_IDLE_CONNS_PER_HOST=${API_MAX_IDLE_CONNS_PER_HOST:-10}
      
      # OpenWeather API Key (required when API_API_TYPE=openweather)
      - API_OPENWEATHER_API_KEY=${API_OPENWEATHER_API_KEY:-}
      
      # Cache Configuration
      - CACHE_DEFAULT_TTL=${CACHE_DEFAULT_TTL:-5m}
      - CACHE_ITEMS_CACHE_TTL=${CACHE_ITEMS_CACHE_TTL:-10m}
      - CACHE_STATUS_CACHE_TTL=${CACHE_STATUS_CACHE_TTL:-5m}
      
      # Worker Configuration (Background Jobs - 15 minute sync)
      - WORKER_ENABLED=${WORKER_ENABLED:-true}
      - WORKER_SYNC_INTERVAL=${WORKER_SYNC_INTERVAL:-15m}
      - WORKER_JOB_TIMEOUT=${WORKER_JOB_TIMEOUT:-10m}
      - WORKER_MAX_WORKERS=${WORKER_MAX_WORKERS:-5}
      
      # Retry Configuration (Circuit Breaker & Backoff)
      - RETRY_MAX_RETRIES=${RETRY_MAX_RETRIES:-5}
      - RETRY_INITIAL_DELAY=${RETRY_INITIAL_DELAY:-1s}
      - RETRY_MAX_DELAY=${RETRY_MAX_DELAY:-30s}
      - RETRY_BACKOFF_FACTOR=${RETRY_BACKOFF_FACTOR:-2.0}
      - RETRY_CIRCUIT_THRESHOLD=${RETRY_CIRCUIT_THRESHOLD:-5}
      - RETRY_CIRCUIT_TIMEOUT=${RETRY_CIRCUIT_TIMEOUT:-60s}
      
      # Migration Configuration (Auto-run on startup)
      - MIGRATION_ENABLED=${MIGRATION_ENABLED:-true}
      - MIGRATION_MIGRATIONS_PATH=/app/migrations
      - MIGRATION_FAIL_ON_ERROR=${MIGRATION_FAIL_ON_ERROR:-true}
    volumes:
      - ./migrations:/app/migrations
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0-bookworm
    environment:
      - MYSQL_ROOT_PASSWORD=${DATABASE_PASSWORD:-rootpassword}
      - MYSQL_DATABASE=${DATABASE_DATABASE:-item_sync}
      - MYSQL_USER=${DATABASE_USER:-appuser}
      - MYSQL_PASSWORD=${DATABASE_PASSWORD:-rootpassword}
    ports:
      - "${DATABASE_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      start_period: 40s
      interval: 10s
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:8-bookworm
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5
      start_period: 10s
      interval: 10s
    restart: unless-stopped
    command: >
      sh -c "
        if [ '${REDIS_PASSWORD:-}' != '' ]; then
          redis-server --requirepass ${REDIS_PASSWORD}
        else
          redis-server
        fi
      "

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local