// Code generated by MockGen. DO NOT EDIT.
// Source: internal/item/usecase/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/item/usecase/interfaces.go -destination=internal/item/usecase/mocks/mock_interfaces.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/zainokta/item-sync/internal/item/entity"
	api "github.com/zainokta/item-sync/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockItemSaver is a mock of ItemSaver interface.
type MockItemSaver struct {
	ctrl     *gomock.Controller
	recorder *MockItemSaverMockRecorder
	isgomock struct{}
}

// MockItemSaverMockRecorder is the mock recorder for MockItemSaver.
type MockItemSaverMockRecorder struct {
	mock *MockItemSaver
}

// NewMockItemSaver creates a new mock instance.
func NewMockItemSaver(ctrl *gomock.Controller) *MockItemSaver {
	mock := &MockItemSaver{ctrl: ctrl}
	mock.recorder = &MockItemSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemSaver) EXPECT() *MockItemSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockItemSaver) Save(ctx context.Context, item entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockItemSaverMockRecorder) Save(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockItemSaver)(nil).Save), ctx, item)
}

// UpsertWithHash mocks base method.
func (m *MockItemSaver) UpsertWithHash(ctx context.Context, apiSource string, externalItem entity.ExternalItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWithHash", ctx, apiSource, externalItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWithHash indicates an expected call of UpsertWithHash.
func (mr *MockItemSaverMockRecorder) UpsertWithHash(ctx, apiSource, externalItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWithHash", reflect.TypeOf((*MockItemSaver)(nil).UpsertWithHash), ctx, apiSource, externalItem)
}

// MockItemFinder is a mock of ItemFinder interface.
type MockItemFinder struct {
	ctrl     *gomock.Controller
	recorder *MockItemFinderMockRecorder
	isgomock struct{}
}

// MockItemFinderMockRecorder is the mock recorder for MockItemFinder.
type MockItemFinderMockRecorder struct {
	mock *MockItemFinder
}

// NewMockItemFinder creates a new mock instance.
func NewMockItemFinder(ctrl *gomock.Controller) *MockItemFinder {
	mock := &MockItemFinder{ctrl: ctrl}
	mock.recorder = &MockItemFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemFinder) EXPECT() *MockItemFinderMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockItemFinder) FindAll(ctx context.Context, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemFinderMockRecorder) FindAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemFinder)(nil).FindAll), ctx, limit, offset)
}

// FindByAPISource mocks base method.
func (m *MockItemFinder) FindByAPISource(ctx context.Context, apiSource string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAPISource", ctx, apiSource, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAPISource indicates an expected call of FindByAPISource.
func (mr *MockItemFinderMockRecorder) FindByAPISource(ctx, apiSource, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAPISource", reflect.TypeOf((*MockItemFinder)(nil).FindByAPISource), ctx, apiSource, limit, offset)
}

// FindByID mocks base method.
func (m *MockItemFinder) FindByID(ctx context.Context, id int) (entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemFinderMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemFinder)(nil).FindByID), ctx, id)
}

// FindByStatus mocks base method.
func (m *MockItemFinder) FindByStatus(ctx context.Context, status string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, status, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockItemFinderMockRecorder) FindByStatus(ctx, status, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockItemFinder)(nil).FindByStatus), ctx, status, limit, offset)
}

// FindByType mocks base method.
func (m *MockItemFinder) FindByType(ctx context.Context, itemType string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByType", ctx, itemType, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByType indicates an expected call of FindByType.
func (mr *MockItemFinderMockRecorder) FindByType(ctx, itemType, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByType", reflect.TypeOf((*MockItemFinder)(nil).FindByType), ctx, itemType, limit, offset)
}

// MockItemCache is a mock of ItemCache interface.
type MockItemCache struct {
	ctrl     *gomock.Controller
	recorder *MockItemCacheMockRecorder
	isgomock struct{}
}

// MockItemCacheMockRecorder is the mock recorder for MockItemCache.
type MockItemCacheMockRecorder struct {
	mock *MockItemCache
}

// NewMockItemCache creates a new mock instance.
func NewMockItemCache(ctrl *gomock.Controller) *MockItemCache {
	mock := &MockItemCache{ctrl: ctrl}
	mock.recorder = &MockItemCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemCache) EXPECT() *MockItemCacheMockRecorder {
	return m.recorder
}

// GetItem mocks base method.
func (m *MockItemCache) GetItem(ctx context.Context, key string) (entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, key)
	ret0, _ := ret[0].(entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemCacheMockRecorder) GetItem(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemCache)(nil).GetItem), ctx, key)
}

// GetItems mocks base method.
func (m *MockItemCache) GetItems(ctx context.Context, key string) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, key)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemCacheMockRecorder) GetItems(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemCache)(nil).GetItems), ctx, key)
}

// Invalidate mocks base method.
func (m *MockItemCache) Invalidate(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invalidate", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockItemCacheMockRecorder) Invalidate(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockItemCache)(nil).Invalidate), ctx, key)
}

// SetItem mocks base method.
func (m *MockItemCache) SetItem(ctx context.Context, key string, item entity.Item, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItem", ctx, key, item, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItem indicates an expected call of SetItem.
func (mr *MockItemCacheMockRecorder) SetItem(ctx, key, item, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItem", reflect.TypeOf((*MockItemCache)(nil).SetItem), ctx, key, item, ttl)
}

// SetItems mocks base method.
func (m *MockItemCache) SetItems(ctx context.Context, key string, items []entity.Item, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetItems", ctx, key, items, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetItems indicates an expected call of SetItems.
func (mr *MockItemCacheMockRecorder) SetItems(ctx, key, items, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetItems", reflect.TypeOf((*MockItemCache)(nil).SetItems), ctx, key, items, ttl)
}

// MockExternalAPIClient is a mock of ExternalAPIClient interface.
type MockExternalAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockExternalAPIClientMockRecorder
	isgomock struct{}
}

// MockExternalAPIClientMockRecorder is the mock recorder for MockExternalAPIClient.
type MockExternalAPIClientMockRecorder struct {
	mock *MockExternalAPIClient
}

// NewMockExternalAPIClient creates a new mock instance.
func NewMockExternalAPIClient(ctrl *gomock.Controller) *MockExternalAPIClient {
	mock := &MockExternalAPIClient{ctrl: ctrl}
	mock.recorder = &MockExternalAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalAPIClient) EXPECT() *MockExternalAPIClientMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockExternalAPIClient) Fetch(ctx context.Context, apiName, operation string, params map[string]any) ([]entity.ExternalItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, apiName, operation, params)
	ret0, _ := ret[0].([]entity.ExternalItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockExternalAPIClientMockRecorder) Fetch(ctx, apiName, operation, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockExternalAPIClient)(nil).Fetch), ctx, apiName, operation, params)
}

// FetchByID mocks base method.
func (m *MockExternalAPIClient) FetchByID(ctx context.Context, apiName string, id int) (entity.ExternalItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByID", ctx, apiName, id)
	ret0, _ := ret[0].(entity.ExternalItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByID indicates an expected call of FetchByID.
func (mr *MockExternalAPIClientMockRecorder) FetchByID(ctx, apiName, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByID", reflect.TypeOf((*MockExternalAPIClient)(nil).FetchByID), ctx, apiName, id)
}

// FetchPaginated mocks base method.
func (m *MockExternalAPIClient) FetchPaginated(ctx context.Context, apiName, operation string, params map[string]any) (*api.PaginatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPaginated", ctx, apiName, operation, params)
	ret0, _ := ret[0].(*api.PaginatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPaginated indicates an expected call of FetchPaginated.
func (mr *MockExternalAPIClientMockRecorder) FetchPaginated(ctx, apiName, operation, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPaginated", reflect.TypeOf((*MockExternalAPIClient)(nil).FetchPaginated), ctx, apiName, operation, params)
}

// MockJobRepository is a mock of JobRepository interface.
type MockJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockJobRepositoryMockRecorder
	isgomock struct{}
}

// MockJobRepositoryMockRecorder is the mock recorder for MockJobRepository.
type MockJobRepositoryMockRecorder struct {
	mock *MockJobRepository
}

// NewMockJobRepository creates a new mock instance.
func NewMockJobRepository(ctrl *gomock.Controller) *MockJobRepository {
	mock := &MockJobRepository{ctrl: ctrl}
	mock.recorder = &MockJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobRepository) EXPECT() *MockJobRepositoryMockRecorder {
	return m.recorder
}

// CreateSyncJobRecord mocks base method.
func (m *MockJobRepository) CreateSyncJobRecord(ctx context.Context, name, apiType string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncJobRecord", ctx, name, apiType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSyncJobRecord indicates an expected call of CreateSyncJobRecord.
func (mr *MockJobRepositoryMockRecorder) CreateSyncJobRecord(ctx, name, apiType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncJobRecord", reflect.TypeOf((*MockJobRepository)(nil).CreateSyncJobRecord), ctx, name, apiType)
}

// UpdateSyncJobRecord mocks base method.
func (m *MockJobRepository) UpdateSyncJobRecord(ctx context.Context, jobID int64, status string, processed, succeeded, failed int, lastErr error, executionTime time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncJobRecord", ctx, jobID, status, processed, succeeded, failed, lastErr, executionTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncJobRecord indicates an expected call of UpdateSyncJobRecord.
func (mr *MockJobRepositoryMockRecorder) UpdateSyncJobRecord(ctx, jobID, status, processed, succeeded, failed, lastErr, executionTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncJobRecord", reflect.TypeOf((*MockJobRepository)(nil).UpdateSyncJobRecord), ctx, jobID, status, processed, succeeded, failed, lastErr, executionTime)
}

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
	isgomock struct{}
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockItemRepository) FindAll(ctx context.Context, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemRepositoryMockRecorder) FindAll(ctx, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemRepository)(nil).FindAll), ctx, limit, offset)
}

// FindByAPISource mocks base method.
func (m *MockItemRepository) FindByAPISource(ctx context.Context, apiSource string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAPISource", ctx, apiSource, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAPISource indicates an expected call of FindByAPISource.
func (mr *MockItemRepositoryMockRecorder) FindByAPISource(ctx, apiSource, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAPISource", reflect.TypeOf((*MockItemRepository)(nil).FindByAPISource), ctx, apiSource, limit, offset)
}

// FindByID mocks base method.
func (m *MockItemRepository) FindByID(ctx context.Context, id int) (entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemRepository)(nil).FindByID), ctx, id)
}

// FindByStatus mocks base method.
func (m *MockItemRepository) FindByStatus(ctx context.Context, status string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByStatus", ctx, status, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByStatus indicates an expected call of FindByStatus.
func (mr *MockItemRepositoryMockRecorder) FindByStatus(ctx, status, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByStatus", reflect.TypeOf((*MockItemRepository)(nil).FindByStatus), ctx, status, limit, offset)
}

// FindByType mocks base method.
func (m *MockItemRepository) FindByType(ctx context.Context, itemType string, limit, offset int) ([]entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByType", ctx, itemType, limit, offset)
	ret0, _ := ret[0].([]entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByType indicates an expected call of FindByType.
func (mr *MockItemRepositoryMockRecorder) FindByType(ctx, itemType, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByType", reflect.TypeOf((*MockItemRepository)(nil).FindByType), ctx, itemType, limit, offset)
}

// Save mocks base method.
func (m *MockItemRepository) Save(ctx context.Context, item entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockItemRepositoryMockRecorder) Save(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockItemRepository)(nil).Save), ctx, item)
}

// UpsertWithHash mocks base method.
func (m *MockItemRepository) UpsertWithHash(ctx context.Context, apiSource string, externalItem entity.ExternalItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertWithHash", ctx, apiSource, externalItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertWithHash indicates an expected call of UpsertWithHash.
func (mr *MockItemRepositoryMockRecorder) UpsertWithHash(ctx, apiSource, externalItem any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertWithHash", reflect.TypeOf((*MockItemRepository)(nil).UpsertWithHash), ctx, apiSource, externalItem)
}
