// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@itemsync.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/items": {
            "get": {
                "description": "Retrieve a paginated list of items with optional filtering by type, status, and API source",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "List items with pagination and filtering",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 20,
                        "description": "Number of items to return (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Number of items to skip (default: 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by item type",
                        "name": "item_type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "completed",
                            "failed"
                        ],
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pokemon",
                            "openweather"
                        ],
                        "type": "string",
                        "description": "Filter by API source",
                        "name": "api_source",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of items with total count",
                        "schema": {
                            "$ref": "#/definitions/dto.GetItemsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/items/{id}": {
            "get": {
                "description": "Retrieve detailed information for a specific item by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "items"
                ],
                "summary": "Get item details by ID",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "description": "Item ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "pokemon",
                            "openweather",
                            "unknown"
                        ],
                        "type": "string",
                        "default": "unknown",
                        "description": "API source for the item",
                        "name": "api_source",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item details",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "item": {
                                    "$ref": "#/definitions/entity.Item"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Item not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/sync": {
            "post": {
                "description": "Fetch and synchronize items from external APIs (Pokemon, OpenWeather) into the local database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sync"
                ],
                "summary": "Sync items from external APIs",
                "parameters": [
                    {
                        "description": "Sync request parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SyncItemsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully synced items",
                        "schema": {
                            "$ref": "#/definitions/dto.SyncItemsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or validation error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    },
                    "502": {
                        "description": "External API error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "VALIDATION_ERROR"
                },
                "details": {},
                "message": {
                    "type": "string",
                    "example": "Validation failed"
                }
            }
        },
        "dto.GetItemsResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Item"
                    }
                },
                "total": {
                    "type": "integer",
                    "example": 150
                }
            }
        },
        "dto.SyncItemsRequest": {
            "type": "object"
        },
        "dto.SyncItemsResponse": {
            "type": "object",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "failed_count": {
                    "type": "integer",
                    "example": 2
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Item"
                    }
                },
                "success_count": {
                    "type": "integer",
                    "example": 15
                }
            }
        },
        "entity.Item": {
            "type": "object",
            "properties": {
                "api_source": {
                    "type": "string",
                    "example": "pokemon"
                },
                "created_at": {
                    "type": "string",
                    "example": "2024-01-15T10:00:00Z"
                },
                "description": {
                    "type": "string",
                    "example": "Electric-type Pokemon"
                },
                "extend_info": {
                    "type": "object",
                    "additionalProperties": true
                },
                "external_id": {
                    "type": "integer",
                    "example": 25
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "synced_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "title": {
                    "type": "string",
                    "example": "Pikachu"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check endpoints",
            "name": "health"
        },
        {
            "description": "Item management endpoints",
            "name": "items"
        },
        {
            "description": "Data synchronization endpoints",
            "name": "sync"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Item Sync Service API",
	Description:      "A robust Go service for synchronizing external API data with automatic background jobs, retry logic, and idempotent operations.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
